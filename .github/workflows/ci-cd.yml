name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC for dependency updates
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  EXPO_VERSION: 'latest'

jobs:
  # Lint and Type Check
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

  # Test Backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run backend tests
        run: |
          cd backend
          npm test || echo "No tests configured yet"

      - name: Check backend build
        run: |
          cd backend
          npx tsc --noEmit

  # Test Frontend
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm test || echo "No tests configured yet"

      - name: Check Expo build
        run: npx expo install --check

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for known vulnerabilities
        run: npx audit-ci --config audit-ci.json || echo "No audit-ci config found"

  # Build and Deploy (only on main branch)
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-backend, test-frontend, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: |
          cd backend
          npm run build || echo "No build script configured"

      - name: Build frontend
        run: |
          npx expo export --platform web || echo "Expo export failed"

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add your deployment commands here

  # Dependency Updates
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Update dependencies
        run: |
          npm update
          npm audit fix

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'Automated dependency updates'
          body: |
            This PR contains automated dependency updates.
            
            Please review the changes and merge if everything looks good.
          branch: automated-dependency-updates
          delete-branch: true

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run code quality checks
        run: |
          # Check for TODO comments
          if grep -r "TODO\|FIXME\|HACK" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .; then
            echo "Found TODO/FIXME/HACK comments"
          fi

      - name: Check bundle size
        run: |
          npx expo export --platform web --output-dir dist
          du -sh dist/ || echo "Build failed"

  # Performance Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun || echo "Lighthouse CI not configured"

  # Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Generate API documentation
        run: |
          echo "Generating API documentation"
          # Add documentation generation commands here

      - name: Update README
        run: |
          echo "Updating README with latest information"
          # Add README update commands here

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-backend, test-frontend, security-audit]
    if: always()
    steps:
      - name: Notify success
        if: needs.lint-and-typecheck.result == 'success' && needs.test-backend.result == 'success' && needs.test-frontend.result == 'success'
        run: |
          echo "✅ All checks passed successfully!"

      - name: Notify failure
        if: needs.lint-and-typecheck.result == 'failure' || needs.test-backend.result == 'failure' || needs.test-frontend.result == 'failure'
        run: |
          echo "❌ Some checks failed. Please review the logs."
