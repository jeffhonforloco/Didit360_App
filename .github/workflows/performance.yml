name: Performance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance tests weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          # Build backend
          cd backend
          npm run build || echo "No backend build script"
          
          # Build frontend
          cd ..
          npx expo export --platform web || echo "Expo export failed"

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          
          # Create lighthouse config
          cat > lighthouserc.js << 'EOF'
          module.exports = {
            ci: {
              collect: {
                url: ['http://localhost:3000'],
                startServerCommand: 'npm start',
                startServerReadyPattern: 'ready',
                startServerReadyTimeout: 30000,
              },
              assert: {
                assertions: {
                  'categories:performance': ['warn', {minScore: 0.8}],
                  'categories:accessibility': ['error', {minScore: 0.9}],
                  'categories:best-practices': ['warn', {minScore: 0.8}],
                  'categories:seo': ['warn', {minScore: 0.8}],
                },
              },
              upload: {
                target: 'temporary-public-storage',
              },
            },
          };
          EOF
          
          lhci autorun || echo "Lighthouse CI not configured"

      - name: Bundle size analysis
        run: |
          echo "Analyzing bundle size..."
          
          # Check if build output exists
          if [ -d "dist" ]; then
            echo "## Bundle Size Analysis" > bundle-analysis.md
            echo "Generated on: $(date)" >> bundle-analysis.md
            echo "" >> bundle-analysis.md
            
            echo "### File Sizes" >> bundle-analysis.md
            echo "\`\`\`" >> bundle-analysis.md
            du -sh dist/* >> bundle-analysis.md
            echo "\`\`\`" >> bundle-analysis.md
            
            echo "### Largest Files" >> bundle-analysis.md
            echo "\`\`\`" >> bundle-analysis.md
            find dist -type f -exec du -h {} + | sort -rh | head -10 >> bundle-analysis.md
            echo "\`\`\`" >> bundle-analysis.md
          else
            echo "No build output found for analysis"
          fi

      - name: Memory usage analysis
        run: |
          echo "Analyzing memory usage..."
          
          # Start the application and monitor memory
          timeout 30s npm start &
          APP_PID=$!
          
          # Monitor memory usage
          sleep 10
          ps -o pid,ppid,cmd,%mem,%cpu -p $APP_PID || echo "Process not found"
          
          # Kill the process
          kill $APP_PID 2>/dev/null || echo "Process already terminated"

      - name: Performance metrics
        run: |
          echo "Collecting performance metrics..."
          
          # Create performance report
          cat > performance-report.md << 'EOF'
          # Performance Report
          
          Generated on: $(date)
          
          ## Metrics
          
          ### Build Performance
          - Build time: [To be measured]
          - Bundle size: [To be measured]
          
          ### Runtime Performance
          - Memory usage: [To be measured]
          - CPU usage: [To be measured]
          
          ### Lighthouse Scores
          - Performance: [To be measured]
          - Accessibility: [To be measured]
          - Best Practices: [To be measured]
          - SEO: [To be measured]
          
          ## Recommendations
          
          1. Optimize bundle size
          2. Implement code splitting
          3. Add performance monitoring
          4. Optimize images and assets
          
          EOF

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: |
            performance-report.md
            bundle-analysis.md
          retention-days: 30

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Check for performance anti-patterns
        run: |
          echo "Checking for performance anti-patterns..."
          
          # Check for large files
          echo "Checking for large files..."
          find . -name "*.js" -o -name "*.ts" -o -name "*.tsx" -o -name "*.jsx" | xargs wc -l | sort -nr | head -10
          
          # Check for unused imports
          echo "Checking for unused imports..."
          npx ts-unused-exports tsconfig.json || echo "No unused exports found"
          
          # Check for console.log statements
          echo "Checking for console.log statements..."
          if grep -r "console\.log" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .; then
            echo "⚠️ Console.log statements found in production code"
          else
            echo "✅ No console.log statements found"
          fi

      - name: Check for memory leaks
        run: |
          echo "Checking for potential memory leaks..."
          
          # Check for event listeners without cleanup
          if grep -r "addEventListener" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .; then
            echo "⚠️ Event listeners found - ensure proper cleanup"
          fi
          
          # Check for timers without cleanup
          if grep -r "setTimeout\|setInterval" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .; then
            echo "⚠️ Timers found - ensure proper cleanup"
          fi

  notify-performance:
    name: Notify Performance
    runs-on: ubuntu-latest
    needs: [performance-test, performance-monitoring]
    if: always()
    steps:
      - name: Notify performance results
        run: |
          if [ "${{ needs.performance-test.result }}" == "success" ] && [ "${{ needs.performance-monitoring.result }}" == "success" ]; then
            echo "⚡ Performance tests completed successfully!"
            echo "📊 Performance metrics collected"
            echo "🔍 Performance monitoring completed"
          else
            echo "⚠️ Some performance tests failed. Please review the performance report."
          fi
