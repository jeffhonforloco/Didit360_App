name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security checks daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "Running security audit..."
          npm audit --audit-level moderate
          
      - name: Check for known vulnerabilities
        run: |
          echo "Checking for known vulnerabilities..."
          npx audit-ci --config audit-ci.json || echo "No audit-ci config found"

      - name: Scan for secrets
        run: |
          echo "Scanning for potential secrets..."
          # Check for common secret patterns
          if grep -r -i "password\|secret\|key\|token" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --exclude-dir=node_modules .; then
            echo "‚ö†Ô∏è Potential secrets found in code"
          else
            echo "‚úÖ No obvious secrets found"
          fi

      - name: Check for hardcoded credentials
        run: |
          echo "Checking for hardcoded credentials..."
          # Check for hardcoded API keys, passwords, etc.
          if grep -r -E "(api[_-]?key|password|secret|token)\s*[:=]\s*['\"][^'\"]{8,}" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --exclude-dir=node_modules .; then
            echo "‚ùå Hardcoded credentials found"
            exit 1
          else
            echo "‚úÖ No hardcoded credentials found"
          fi

  dependency-security:
    name: Dependency Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for vulnerable dependencies
        run: |
          echo "Checking for vulnerable dependencies..."
          npm audit --audit-level high
          
      - name: Update vulnerable dependencies
        run: |
          echo "Updating vulnerable dependencies..."
          npm audit fix --force || echo "Some vulnerabilities could not be fixed automatically"

      - name: Check dependency licenses
        run: |
          echo "Checking dependency licenses..."
          npx license-checker --summary || echo "License checker not available"

  code-security:
    name: Code Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Check for security anti-patterns
        run: |
          echo "Checking for security anti-patterns..."
          
          # Check for eval usage
          if grep -r "eval(" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .; then
            echo "‚ùå eval() usage found - potential security risk"
            exit 1
          fi
          
          # Check for innerHTML usage
          if grep -r "innerHTML" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .; then
            echo "‚ö†Ô∏è innerHTML usage found - potential XSS risk"
          fi
          
          # Check for dangerous functions
          if grep -r -E "(exec|system|spawn|child_process)" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .; then
            echo "‚ö†Ô∏è Potentially dangerous functions found"
          fi
          
          echo "‚úÖ Security anti-pattern check completed"

      - name: Check for SQL injection patterns
        run: |
          echo "Checking for SQL injection patterns..."
          
          # Check for string concatenation in SQL
          if grep -r -E "SELECT.*\+|INSERT.*\+|UPDATE.*\+|DELETE.*\+" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .; then
            echo "‚ö†Ô∏è Potential SQL injection patterns found"
          else
            echo "‚úÖ No obvious SQL injection patterns found"
          fi

  security-headers:
    name: Security Headers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Check security headers implementation
        run: |
          echo "Checking security headers implementation..."
          
          # Check if security headers are implemented
          if grep -r "X-Content-Type-Options\|X-Frame-Options\|X-XSS-Protection" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .; then
            echo "‚úÖ Security headers found in code"
          else
            echo "‚ö†Ô∏è Security headers not found in code"
          fi

  create-security-report:
    name: Create Security Report
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-security, code-security, security-headers]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Create security report
        run: |
          echo "# Security Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Security Scan Results" >> security-report.md
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> security-report.md
          echo "- Dependency Security: ${{ needs.dependency-security.result }}" >> security-report.md
          echo "- Code Security: ${{ needs.code-security.result }}" >> security-report.md
          echo "- Security Headers: ${{ needs.security-headers.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Recommendations" >> security-report.md
          echo "1. Regularly update dependencies" >> security-report.md
          echo "2. Use environment variables for secrets" >> security-report.md
          echo "3. Implement proper input validation" >> security-report.md
          echo "4. Use HTTPS in production" >> security-report.md
          echo "5. Implement rate limiting" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

  notify-security:
    name: Notify Security
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-security, code-security, security-headers]
    if: always()
    steps:
      - name: Notify security results
        run: |
          if [ "${{ needs.security-scan.result }}" == "success" ] && [ "${{ needs.dependency-security.result }}" == "success" ] && [ "${{ needs.code-security.result }}" == "success" ]; then
            echo "üîí Security checks passed successfully!"
          else
            echo "‚ö†Ô∏è Some security checks failed. Please review the security report."
          fi
